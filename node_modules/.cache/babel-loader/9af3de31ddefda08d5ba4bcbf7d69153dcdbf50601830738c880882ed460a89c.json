{"ast":null,"code":"import useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport safeHasOwnProperty from './shared/safeHasOwnProperty';\nimport assignEventOnMount from './shared/assignEventOnMount';\n/**\n * Returns a frozen object of callback setters to handle the mouse events.<br/>\n * It accepts a DOM ref representing the events target. <br/>\n * If a target is not provided the events will be globally attached to the document object.\n * <br/>\n * ### Shall the `useMouseEvents` callbacks replace the standard mouse handler props?\n *\n * **They shall not!**<br />\n * **useMouseEvents is meant to be used to abstract more complex hooks that need to control mouse**, for instance:\n * a drag n drop hook.<br />\n * Using useMouseEvents handlers instead of the classic props approach it's just as bad as it sounds since you'll\n * lose the React SyntheticEvent performance boost.<br />\n * If you were doing something like the following:\n */\nconst useMouseEvents = (targetRef = null) => {\n  const [onMouseDownHandler, setOnMouseDown] = useHandlerSetterRef();\n  const [onMouseEnterHandler, setOnMouseEnter] = useHandlerSetterRef();\n  const [onMouseLeaveHandler, setOnMouseLeave] = useHandlerSetterRef();\n  const [onMouseMoveHandler, setOnMouseMove] = useHandlerSetterRef();\n  const [onMouseOutHandler, setOnMouseOut] = useHandlerSetterRef();\n  const [onMouseOverHandler, setOnMouseOver] = useHandlerSetterRef();\n  const [onMouseUpHandler, setOnMouseUp] = useHandlerSetterRef();\n  if (targetRef !== null && !safeHasOwnProperty(targetRef, 'current')) {\n    return createCbSetterErrorProxy('Unable to assign any mouse event to the given ref');\n  }\n  assignEventOnMount(targetRef, onMouseDownHandler, 'mousedown');\n  assignEventOnMount(targetRef, onMouseEnterHandler, 'mouseenter');\n  assignEventOnMount(targetRef, onMouseLeaveHandler, 'mouseleave');\n  assignEventOnMount(targetRef, onMouseMoveHandler, 'mousemove');\n  assignEventOnMount(targetRef, onMouseOutHandler, 'mouseout');\n  assignEventOnMount(targetRef, onMouseOverHandler, 'mouseover');\n  assignEventOnMount(targetRef, onMouseUpHandler, 'mouseup');\n  return Object.freeze({\n    onMouseDown: setOnMouseDown,\n    onMouseEnter: setOnMouseEnter,\n    onMouseLeave: setOnMouseLeave,\n    onMouseMove: setOnMouseMove,\n    onMouseOut: setOnMouseOut,\n    onMouseOver: setOnMouseOver,\n    onMouseUp: setOnMouseUp\n  });\n};\nexport default useMouseEvents;","map":{"version":3,"names":["useHandlerSetterRef","createCbSetterErrorProxy","safeHasOwnProperty","assignEventOnMount","useMouseEvents","targetRef","onMouseDownHandler","setOnMouseDown","onMouseEnterHandler","setOnMouseEnter","onMouseLeaveHandler","setOnMouseLeave","onMouseMoveHandler","setOnMouseMove","onMouseOutHandler","setOnMouseOut","onMouseOverHandler","setOnMouseOver","onMouseUpHandler","setOnMouseUp","Object","freeze","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"],"sources":["C:/Users/HAI/OneDrive/Documents/Hobby/Frontend/node_modules/beautiful-react-hooks/esm/useMouseEvents.js"],"sourcesContent":["import useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport safeHasOwnProperty from './shared/safeHasOwnProperty';\nimport assignEventOnMount from './shared/assignEventOnMount';\n/**\n * Returns a frozen object of callback setters to handle the mouse events.<br/>\n * It accepts a DOM ref representing the events target. <br/>\n * If a target is not provided the events will be globally attached to the document object.\n * <br/>\n * ### Shall the `useMouseEvents` callbacks replace the standard mouse handler props?\n *\n * **They shall not!**<br />\n * **useMouseEvents is meant to be used to abstract more complex hooks that need to control mouse**, for instance:\n * a drag n drop hook.<br />\n * Using useMouseEvents handlers instead of the classic props approach it's just as bad as it sounds since you'll\n * lose the React SyntheticEvent performance boost.<br />\n * If you were doing something like the following:\n */\nconst useMouseEvents = (targetRef = null) => {\n    const [onMouseDownHandler, setOnMouseDown] = useHandlerSetterRef();\n    const [onMouseEnterHandler, setOnMouseEnter] = useHandlerSetterRef();\n    const [onMouseLeaveHandler, setOnMouseLeave] = useHandlerSetterRef();\n    const [onMouseMoveHandler, setOnMouseMove] = useHandlerSetterRef();\n    const [onMouseOutHandler, setOnMouseOut] = useHandlerSetterRef();\n    const [onMouseOverHandler, setOnMouseOver] = useHandlerSetterRef();\n    const [onMouseUpHandler, setOnMouseUp] = useHandlerSetterRef();\n    if (targetRef !== null && !safeHasOwnProperty(targetRef, 'current')) {\n        return createCbSetterErrorProxy('Unable to assign any mouse event to the given ref');\n    }\n    assignEventOnMount(targetRef, onMouseDownHandler, 'mousedown');\n    assignEventOnMount(targetRef, onMouseEnterHandler, 'mouseenter');\n    assignEventOnMount(targetRef, onMouseLeaveHandler, 'mouseleave');\n    assignEventOnMount(targetRef, onMouseMoveHandler, 'mousemove');\n    assignEventOnMount(targetRef, onMouseOutHandler, 'mouseout');\n    assignEventOnMount(targetRef, onMouseOverHandler, 'mouseover');\n    assignEventOnMount(targetRef, onMouseUpHandler, 'mouseup');\n    return Object.freeze({\n        onMouseDown: setOnMouseDown,\n        onMouseEnter: setOnMouseEnter,\n        onMouseLeave: setOnMouseLeave,\n        onMouseMove: setOnMouseMove,\n        onMouseOut: setOnMouseOut,\n        onMouseOver: setOnMouseOver,\n        onMouseUp: setOnMouseUp,\n    });\n};\nexport default useMouseEvents;\n"],"mappings":"AAAA,OAAOA,mBAAmB,MAAM,8BAA8B;AAC9D,OAAOC,wBAAwB,MAAM,mCAAmC;AACxE,OAAOC,kBAAkB,MAAM,6BAA6B;AAC5D,OAAOC,kBAAkB,MAAM,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAACC,SAAS,GAAG,IAAI,KAAK;EACzC,MAAM,CAACC,kBAAkB,EAAEC,cAAc,CAAC,GAAGP,mBAAmB,CAAC,CAAC;EAClE,MAAM,CAACQ,mBAAmB,EAAEC,eAAe,CAAC,GAAGT,mBAAmB,CAAC,CAAC;EACpE,MAAM,CAACU,mBAAmB,EAAEC,eAAe,CAAC,GAAGX,mBAAmB,CAAC,CAAC;EACpE,MAAM,CAACY,kBAAkB,EAAEC,cAAc,CAAC,GAAGb,mBAAmB,CAAC,CAAC;EAClE,MAAM,CAACc,iBAAiB,EAAEC,aAAa,CAAC,GAAGf,mBAAmB,CAAC,CAAC;EAChE,MAAM,CAACgB,kBAAkB,EAAEC,cAAc,CAAC,GAAGjB,mBAAmB,CAAC,CAAC;EAClE,MAAM,CAACkB,gBAAgB,EAAEC,YAAY,CAAC,GAAGnB,mBAAmB,CAAC,CAAC;EAC9D,IAAIK,SAAS,KAAK,IAAI,IAAI,CAACH,kBAAkB,CAACG,SAAS,EAAE,SAAS,CAAC,EAAE;IACjE,OAAOJ,wBAAwB,CAAC,mDAAmD,CAAC;EACxF;EACAE,kBAAkB,CAACE,SAAS,EAAEC,kBAAkB,EAAE,WAAW,CAAC;EAC9DH,kBAAkB,CAACE,SAAS,EAAEG,mBAAmB,EAAE,YAAY,CAAC;EAChEL,kBAAkB,CAACE,SAAS,EAAEK,mBAAmB,EAAE,YAAY,CAAC;EAChEP,kBAAkB,CAACE,SAAS,EAAEO,kBAAkB,EAAE,WAAW,CAAC;EAC9DT,kBAAkB,CAACE,SAAS,EAAES,iBAAiB,EAAE,UAAU,CAAC;EAC5DX,kBAAkB,CAACE,SAAS,EAAEW,kBAAkB,EAAE,WAAW,CAAC;EAC9Db,kBAAkB,CAACE,SAAS,EAAEa,gBAAgB,EAAE,SAAS,CAAC;EAC1D,OAAOE,MAAM,CAACC,MAAM,CAAC;IACjBC,WAAW,EAAEf,cAAc;IAC3BgB,YAAY,EAAEd,eAAe;IAC7Be,YAAY,EAAEb,eAAe;IAC7Bc,WAAW,EAAEZ,cAAc;IAC3Ba,UAAU,EAAEX,aAAa;IACzBY,WAAW,EAAEV,cAAc;IAC3BW,SAAS,EAAET;EACf,CAAC,CAAC;AACN,CAAC;AACD,eAAef,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}