{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport useGeolocationEvents from './useGeolocationEvents';\nimport geolocationStandardOptions from './shared/geolocationStandardOptions';\nimport makePositionObj from './shared/makePositionObject';\nimport isSamePosition from './shared/isSamePosition';\n/**\n * Returns a frozen object containing the `position` object, the `isSupported` boolean flag, reporting whether the\n * geolocation API is supported or not and the `isRetrieving` boolean flag reporting whether the hook is fetching the\n * current position.\n * The position is retrieved by using the\n * [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API),\n * when supported.<br/><br />\n * It possibly accepts an object of [geolocation options]\n * (https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) to be used as parameter when using the\n * `Geolocation.getCurrentPosition()` method.\n */\nconst useGeolocationState = (options = geolocationStandardOptions) => {\n  const [position, setPosition] = useState(null);\n  const [isRetrieving, setRetrieving] = useState(false);\n  const {\n    isSupported,\n    onChange\n  } = useGeolocationEvents(options);\n  const savePosition = useCallback(() => {\n    if (position === null) {\n      setRetrieving(true);\n      navigator.geolocation.getCurrentPosition(nextPosition => {\n        if (!isSamePosition(position, nextPosition)) {\n          setPosition(makePositionObj(nextPosition));\n          setRetrieving(false);\n        }\n      });\n    }\n  }, [position]);\n  useEffect(savePosition, [position]);\n  onChange(savePosition);\n  return Object.freeze({\n    isSupported,\n    isRetrieving,\n    position\n  });\n};\nexport default useGeolocationState;","map":{"version":3,"names":["useCallback","useEffect","useState","useGeolocationEvents","geolocationStandardOptions","makePositionObj","isSamePosition","useGeolocationState","options","position","setPosition","isRetrieving","setRetrieving","isSupported","onChange","savePosition","navigator","geolocation","getCurrentPosition","nextPosition","Object","freeze"],"sources":["C:/Users/HAI/OneDrive/Documents/Frontend/node_modules/beautiful-react-hooks/esm/useGeolocationState.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport useGeolocationEvents from './useGeolocationEvents';\nimport geolocationStandardOptions from './shared/geolocationStandardOptions';\nimport makePositionObj from './shared/makePositionObject';\nimport isSamePosition from './shared/isSamePosition';\n/**\n * Returns a frozen object containing the `position` object, the `isSupported` boolean flag, reporting whether the\n * geolocation API is supported or not and the `isRetrieving` boolean flag reporting whether the hook is fetching the\n * current position.\n * The position is retrieved by using the\n * [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API),\n * when supported.<br/><br />\n * It possibly accepts an object of [geolocation options]\n * (https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) to be used as parameter when using the\n * `Geolocation.getCurrentPosition()` method.\n */\nconst useGeolocationState = (options = geolocationStandardOptions) => {\n    const [position, setPosition] = useState(null);\n    const [isRetrieving, setRetrieving] = useState(false);\n    const { isSupported, onChange } = useGeolocationEvents(options);\n    const savePosition = useCallback(() => {\n        if (position === null) {\n            setRetrieving(true);\n            navigator.geolocation.getCurrentPosition((nextPosition) => {\n                if (!isSamePosition(position, nextPosition)) {\n                    setPosition(makePositionObj(nextPosition));\n                    setRetrieving(false);\n                }\n            });\n        }\n    }, [position]);\n    useEffect(savePosition, [position]);\n    onChange(savePosition);\n    return Object.freeze({\n        isSupported,\n        isRetrieving,\n        position,\n    });\n};\nexport default useGeolocationState;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,0BAA0B,MAAM,qCAAqC;AAC5E,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,cAAc,MAAM,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGA,CAACC,OAAO,GAAGJ,0BAA0B,KAAK;EAClE,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,YAAY,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM;IAAEW,WAAW;IAAEC;EAAS,CAAC,GAAGX,oBAAoB,CAACK,OAAO,CAAC;EAC/D,MAAMO,YAAY,GAAGf,WAAW,CAAC,MAAM;IACnC,IAAIS,QAAQ,KAAK,IAAI,EAAE;MACnBG,aAAa,CAAC,IAAI,CAAC;MACnBI,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,YAAY,IAAK;QACvD,IAAI,CAACb,cAAc,CAACG,QAAQ,EAAEU,YAAY,CAAC,EAAE;UACzCT,WAAW,CAACL,eAAe,CAACc,YAAY,CAAC,CAAC;UAC1CP,aAAa,CAAC,KAAK,CAAC;QACxB;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EACdR,SAAS,CAACc,YAAY,EAAE,CAACN,QAAQ,CAAC,CAAC;EACnCK,QAAQ,CAACC,YAAY,CAAC;EACtB,OAAOK,MAAM,CAACC,MAAM,CAAC;IACjBR,WAAW;IACXF,YAAY;IACZF;EACJ,CAAC,CAAC;AACN,CAAC;AACD,eAAeF,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}