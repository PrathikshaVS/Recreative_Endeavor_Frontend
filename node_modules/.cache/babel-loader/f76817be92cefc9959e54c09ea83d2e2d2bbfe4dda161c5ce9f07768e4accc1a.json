{"ast":null,"code":"import { useCallback, useRef } from 'react';\n/**\n * Returns an object where the first item is the [ref](https://reactjs.org/docs/hooks-reference.html#useref) to a\n * callback function and the second one is setter for that function.\n *\n * Although it function looks quite similar to the [useState](https://reactjs.org/docs/hooks-reference.html#usestate),\n * hook, in this case the setter just makes sure the given callback is indeed a new function.<br /><br />\n * **Setting a callback ref does not force your component to re-render.**<br /><br />\n *\n * `useHandlerSetter` is useful when abstracting other hooks to possibly implement handlers setters.\n */\nconst useHandlerSetterRef = handler => {\n  const handlerRef = useRef(handler);\n  const setHandler = useCallback(nextCallback => {\n    if (typeof nextCallback !== 'function') {\n      throw new Error('the argument supplied to the \\'setHandler\\' function should be of type function');\n    }\n    handlerRef.current = nextCallback;\n  }, [handlerRef.current]);\n  return [handlerRef, setHandler];\n};\nexport default useHandlerSetterRef;","map":{"version":3,"names":["useCallback","useRef","useHandlerSetterRef","handler","handlerRef","setHandler","nextCallback","Error","current"],"sources":["C:/Users/HAI/OneDrive/Documents/Hobby/Frontend/node_modules/beautiful-react-hooks/esm/shared/useHandlerSetterRef.js"],"sourcesContent":["import { useCallback, useRef } from 'react';\n/**\n * Returns an object where the first item is the [ref](https://reactjs.org/docs/hooks-reference.html#useref) to a\n * callback function and the second one is setter for that function.\n *\n * Although it function looks quite similar to the [useState](https://reactjs.org/docs/hooks-reference.html#usestate),\n * hook, in this case the setter just makes sure the given callback is indeed a new function.<br /><br />\n * **Setting a callback ref does not force your component to re-render.**<br /><br />\n *\n * `useHandlerSetter` is useful when abstracting other hooks to possibly implement handlers setters.\n */\nconst useHandlerSetterRef = (handler) => {\n    const handlerRef = useRef(handler);\n    const setHandler = useCallback((nextCallback) => {\n        if (typeof nextCallback !== 'function') {\n            throw new Error('the argument supplied to the \\'setHandler\\' function should be of type function');\n        }\n        handlerRef.current = nextCallback;\n    }, [handlerRef.current]);\n    return [handlerRef, setHandler];\n};\nexport default useHandlerSetterRef;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAIC,OAAO,IAAK;EACrC,MAAMC,UAAU,GAAGH,MAAM,CAACE,OAAO,CAAC;EAClC,MAAME,UAAU,GAAGL,WAAW,CAAEM,YAAY,IAAK;IAC7C,IAAI,OAAOA,YAAY,KAAK,UAAU,EAAE;MACpC,MAAM,IAAIC,KAAK,CAAC,iFAAiF,CAAC;IACtG;IACAH,UAAU,CAACI,OAAO,GAAGF,YAAY;EACrC,CAAC,EAAE,CAACF,UAAU,CAACI,OAAO,CAAC,CAAC;EACxB,OAAO,CAACJ,UAAU,EAAEC,UAAU,CAAC;AACnC,CAAC;AACD,eAAeH,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}