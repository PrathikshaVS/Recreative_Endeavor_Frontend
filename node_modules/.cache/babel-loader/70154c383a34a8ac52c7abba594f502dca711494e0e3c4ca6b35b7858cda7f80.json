{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nconst errorMessage = 'matchMedia is not supported, this could happen both because window.matchMedia is not supported by' + ' your current browser or you\\'re using the useMediaQuery hook whilst server side rendering.';\n/**\n * Accepts a media query string then uses the\n * [window.matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) API to determine if it\n * matches with the current document.<br />\n * It also monitor the document changes to detect when it matches or stops matching the media query.<br />\n * Returns the validity state of the given media query.\n *\n */\nconst useMediaQuery = mediaQuery => {\n  if (!isClient || !isAPISupported('matchMedia')) {\n    // eslint-disable-next-line no-console\n    console.warn(errorMessage);\n    return null;\n  }\n  const [isVerified, setIsVerified] = useState(!!window.matchMedia(mediaQuery).matches);\n  useEffect(() => {\n    const mediaQueryList = window.matchMedia(mediaQuery);\n    const documentChangeHandler = () => setIsVerified(!!mediaQueryList.matches);\n    try {\n      mediaQueryList.addEventListener('change', documentChangeHandler);\n    } catch (e) {\n      // Safari isn't supporting mediaQueryList.addEventListener\n      mediaQueryList.addListener(documentChangeHandler);\n    }\n    documentChangeHandler();\n    return () => {\n      try {\n        mediaQueryList.removeEventListener('change', documentChangeHandler);\n      } catch (e) {\n        // Safari isn't supporting mediaQueryList.removeEventListener\n        mediaQueryList.removeListener(documentChangeHandler);\n      }\n    };\n  }, [mediaQuery]);\n  return isVerified;\n};\nexport default useMediaQuery;","map":{"version":3,"names":["useEffect","useState","isClient","isAPISupported","errorMessage","useMediaQuery","mediaQuery","console","warn","isVerified","setIsVerified","window","matchMedia","matches","mediaQueryList","documentChangeHandler","addEventListener","e","addListener","removeEventListener","removeListener"],"sources":["C:/Users/HAI/OneDrive/Documents/Hobby/Frontend/node_modules/beautiful-react-hooks/esm/useMediaQuery.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nconst errorMessage = 'matchMedia is not supported, this could happen both because window.matchMedia is not supported by'\n    + ' your current browser or you\\'re using the useMediaQuery hook whilst server side rendering.';\n/**\n * Accepts a media query string then uses the\n * [window.matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) API to determine if it\n * matches with the current document.<br />\n * It also monitor the document changes to detect when it matches or stops matching the media query.<br />\n * Returns the validity state of the given media query.\n *\n */\nconst useMediaQuery = (mediaQuery) => {\n    if (!isClient || !isAPISupported('matchMedia')) {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage);\n        return null;\n    }\n    const [isVerified, setIsVerified] = useState(!!window.matchMedia(mediaQuery).matches);\n    useEffect(() => {\n        const mediaQueryList = window.matchMedia(mediaQuery);\n        const documentChangeHandler = () => setIsVerified(!!mediaQueryList.matches);\n        try {\n            mediaQueryList.addEventListener('change', documentChangeHandler);\n        }\n        catch (e) {\n            // Safari isn't supporting mediaQueryList.addEventListener\n            mediaQueryList.addListener(documentChangeHandler);\n        }\n        documentChangeHandler();\n        return () => {\n            try {\n                mediaQueryList.removeEventListener('change', documentChangeHandler);\n            }\n            catch (e) {\n                // Safari isn't supporting mediaQueryList.removeEventListener\n                mediaQueryList.removeListener(documentChangeHandler);\n            }\n        };\n    }, [mediaQuery]);\n    return isVerified;\n};\nexport default useMediaQuery;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,cAAc,MAAM,yBAAyB;AACpD,MAAMC,YAAY,GAAG,mGAAmG,GAClH,6FAA6F;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAIC,UAAU,IAAK;EAClC,IAAI,CAACJ,QAAQ,IAAI,CAACC,cAAc,CAAC,YAAY,CAAC,EAAE;IAC5C;IACAI,OAAO,CAACC,IAAI,CAACJ,YAAY,CAAC;IAC1B,OAAO,IAAI;EACf;EACA,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAACU,MAAM,CAACC,UAAU,CAACN,UAAU,CAAC,CAACO,OAAO,CAAC;EACrFb,SAAS,CAAC,MAAM;IACZ,MAAMc,cAAc,GAAGH,MAAM,CAACC,UAAU,CAACN,UAAU,CAAC;IACpD,MAAMS,qBAAqB,GAAGA,CAAA,KAAML,aAAa,CAAC,CAAC,CAACI,cAAc,CAACD,OAAO,CAAC;IAC3E,IAAI;MACAC,cAAc,CAACE,gBAAgB,CAAC,QAAQ,EAAED,qBAAqB,CAAC;IACpE,CAAC,CACD,OAAOE,CAAC,EAAE;MACN;MACAH,cAAc,CAACI,WAAW,CAACH,qBAAqB,CAAC;IACrD;IACAA,qBAAqB,CAAC,CAAC;IACvB,OAAO,MAAM;MACT,IAAI;QACAD,cAAc,CAACK,mBAAmB,CAAC,QAAQ,EAAEJ,qBAAqB,CAAC;MACvE,CAAC,CACD,OAAOE,CAAC,EAAE;QACN;QACAH,cAAc,CAACM,cAAc,CAACL,qBAAqB,CAAC;MACxD;IACJ,CAAC;EACL,CAAC,EAAE,CAACT,UAAU,CAAC,CAAC;EAChB,OAAOG,UAAU;AACrB,CAAC;AACD,eAAeJ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}