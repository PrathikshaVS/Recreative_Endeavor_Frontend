{"ast":null,"code":"import { useState } from 'react';\nimport useGlobalEvent from './useGlobalEvent';\n/**\n * Uses the [Navigator online API](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine) to define\n * whether the browser is connected or not.\n */\nconst useOnlineState = () => {\n  /**\n   * If the browser doesn't support the `navigator.onLine` state, the hook will always return true\n   * assuming the app is already online.\n   */\n  const isSupported = typeof window !== 'undefined' && 'ononline' in window;\n  const [isOnline, setIsOnline] = useState(isSupported ? navigator.onLine : true);\n  const whenOnline = useGlobalEvent('online', undefined, {\n    capture: true\n  });\n  const whenOffline = useGlobalEvent('offline', undefined, {\n    capture: true\n  });\n  if (!isSupported) {\n    // eslint-disable-next-line max-len, no-console\n    console.warn('The current device does not support the \\'online/offline\\' events, you should avoid using useOnlineState');\n    return isOnline;\n  }\n  whenOnline(() => {\n    setIsOnline(true);\n  });\n  whenOffline(() => {\n    setIsOnline(false);\n  });\n  return isOnline;\n};\nexport default useOnlineState;","map":{"version":3,"names":["useState","useGlobalEvent","useOnlineState","isSupported","window","isOnline","setIsOnline","navigator","onLine","whenOnline","undefined","capture","whenOffline","console","warn"],"sources":["C:/Users/HAI/OneDrive/Documents/Frontend/node_modules/beautiful-react-hooks/esm/useOnlineState.js"],"sourcesContent":["import { useState } from 'react';\nimport useGlobalEvent from './useGlobalEvent';\n/**\n * Uses the [Navigator online API](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine) to define\n * whether the browser is connected or not.\n */\nconst useOnlineState = () => {\n    /**\n     * If the browser doesn't support the `navigator.onLine` state, the hook will always return true\n     * assuming the app is already online.\n     */\n    const isSupported = typeof window !== 'undefined' && 'ononline' in window;\n    const [isOnline, setIsOnline] = useState(isSupported ? navigator.onLine : true);\n    const whenOnline = useGlobalEvent('online', undefined, { capture: true });\n    const whenOffline = useGlobalEvent('offline', undefined, { capture: true });\n    if (!isSupported) {\n        // eslint-disable-next-line max-len, no-console\n        console.warn('The current device does not support the \\'online/offline\\' events, you should avoid using useOnlineState');\n        return isOnline;\n    }\n    whenOnline(() => {\n        setIsOnline(true);\n    });\n    whenOffline(() => {\n        setIsOnline(false);\n    });\n    return isOnline;\n};\nexport default useOnlineState;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB;AACJ;AACA;AACA;EACI,MAAMC,WAAW,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,UAAU,IAAIA,MAAM;EACzE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAACG,WAAW,GAAGI,SAAS,CAACC,MAAM,GAAG,IAAI,CAAC;EAC/E,MAAMC,UAAU,GAAGR,cAAc,CAAC,QAAQ,EAAES,SAAS,EAAE;IAAEC,OAAO,EAAE;EAAK,CAAC,CAAC;EACzE,MAAMC,WAAW,GAAGX,cAAc,CAAC,SAAS,EAAES,SAAS,EAAE;IAAEC,OAAO,EAAE;EAAK,CAAC,CAAC;EAC3E,IAAI,CAACR,WAAW,EAAE;IACd;IACAU,OAAO,CAACC,IAAI,CAAC,0GAA0G,CAAC;IACxH,OAAOT,QAAQ;EACnB;EACAI,UAAU,CAAC,MAAM;IACbH,WAAW,CAAC,IAAI,CAAC;EACrB,CAAC,CAAC;EACFM,WAAW,CAAC,MAAM;IACdN,WAAW,CAAC,KAAK,CAAC;EACtB,CAAC,CAAC;EACF,OAAOD,QAAQ;AACnB,CAAC;AACD,eAAeH,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}