{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport geolocationStandardOptions from './shared/geolocationStandardOptions';\n/**\n * Returns a frozen object of callback setters to handle the geolocation events.<br/>\n * So far, the supported methods are: `onChange`, invoked when the position changes and `onError`, invoked when\n * an error occur while retrieving the position.<br/>\n * The returned object also contains the `isSupported` boolean flag reporting whether the geolocation API is supported.\n */\nconst useGeolocationEvents = (options = geolocationStandardOptions) => {\n  const watchId = useRef();\n  const [onChangeRef, setOnChangeRef] = useHandlerSetterRef();\n  const [onErrorRef, setOnErrorRef] = useHandlerSetterRef();\n  const isSupported = typeof window !== 'undefined' && 'geolocation' in window.navigator;\n  useEffect(() => {\n    const onSuccess = successEvent => {\n      if (onChangeRef.current) {\n        onChangeRef.current(successEvent);\n      }\n    };\n    const onError = err => {\n      if (onErrorRef.current) {\n        onErrorRef.current(err);\n      }\n    };\n    if (isSupported) {\n      watchId.current = window.navigator.geolocation.watchPosition(onSuccess, onError, options);\n    }\n    return () => {\n      if (isSupported) {\n        window.navigator.geolocation.clearWatch(watchId.current);\n      }\n    };\n  }, []);\n  return !isSupported ? createCbSetterErrorProxy('The Geolocation API is not supported') : Object.freeze({\n    isSupported,\n    onChange: setOnChangeRef,\n    onError: setOnErrorRef\n  });\n};\nexport default useGeolocationEvents;","map":{"version":3,"names":["useEffect","useRef","useHandlerSetterRef","createCbSetterErrorProxy","geolocationStandardOptions","useGeolocationEvents","options","watchId","onChangeRef","setOnChangeRef","onErrorRef","setOnErrorRef","isSupported","window","navigator","onSuccess","successEvent","current","onError","err","geolocation","watchPosition","clearWatch","Object","freeze","onChange"],"sources":["C:/Users/HAI/OneDrive/Documents/Frontend/node_modules/beautiful-react-hooks/esm/useGeolocationEvents.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport geolocationStandardOptions from './shared/geolocationStandardOptions';\n/**\n * Returns a frozen object of callback setters to handle the geolocation events.<br/>\n * So far, the supported methods are: `onChange`, invoked when the position changes and `onError`, invoked when\n * an error occur while retrieving the position.<br/>\n * The returned object also contains the `isSupported` boolean flag reporting whether the geolocation API is supported.\n */\nconst useGeolocationEvents = (options = geolocationStandardOptions) => {\n    const watchId = useRef();\n    const [onChangeRef, setOnChangeRef] = useHandlerSetterRef();\n    const [onErrorRef, setOnErrorRef] = useHandlerSetterRef();\n    const isSupported = typeof window !== 'undefined' && 'geolocation' in window.navigator;\n    useEffect(() => {\n        const onSuccess = (successEvent) => {\n            if (onChangeRef.current) {\n                onChangeRef.current(successEvent);\n            }\n        };\n        const onError = (err) => {\n            if (onErrorRef.current) {\n                onErrorRef.current(err);\n            }\n        };\n        if (isSupported) {\n            watchId.current = window.navigator.geolocation.watchPosition(onSuccess, onError, options);\n        }\n        return () => {\n            if (isSupported) {\n                window.navigator.geolocation.clearWatch(watchId.current);\n            }\n        };\n    }, []);\n    return !isSupported ? createCbSetterErrorProxy('The Geolocation API is not supported') : Object.freeze({\n        isSupported,\n        onChange: setOnChangeRef,\n        onError: setOnErrorRef,\n    });\n};\nexport default useGeolocationEvents;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,OAAOC,wBAAwB,MAAM,mCAAmC;AACxE,OAAOC,0BAA0B,MAAM,qCAAqC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAGA,CAACC,OAAO,GAAGF,0BAA0B,KAAK;EACnE,MAAMG,OAAO,GAAGN,MAAM,CAAC,CAAC;EACxB,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGP,mBAAmB,CAAC,CAAC;EAC3D,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,mBAAmB,CAAC,CAAC;EACzD,MAAMU,WAAW,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,aAAa,IAAIA,MAAM,CAACC,SAAS;EACtFd,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAIC,YAAY,IAAK;MAChC,IAAIR,WAAW,CAACS,OAAO,EAAE;QACrBT,WAAW,CAACS,OAAO,CAACD,YAAY,CAAC;MACrC;IACJ,CAAC;IACD,MAAME,OAAO,GAAIC,GAAG,IAAK;MACrB,IAAIT,UAAU,CAACO,OAAO,EAAE;QACpBP,UAAU,CAACO,OAAO,CAACE,GAAG,CAAC;MAC3B;IACJ,CAAC;IACD,IAAIP,WAAW,EAAE;MACbL,OAAO,CAACU,OAAO,GAAGJ,MAAM,CAACC,SAAS,CAACM,WAAW,CAACC,aAAa,CAACN,SAAS,EAAEG,OAAO,EAAEZ,OAAO,CAAC;IAC7F;IACA,OAAO,MAAM;MACT,IAAIM,WAAW,EAAE;QACbC,MAAM,CAACC,SAAS,CAACM,WAAW,CAACE,UAAU,CAACf,OAAO,CAACU,OAAO,CAAC;MAC5D;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACL,WAAW,GAAGT,wBAAwB,CAAC,sCAAsC,CAAC,GAAGoB,MAAM,CAACC,MAAM,CAAC;IACnGZ,WAAW;IACXa,QAAQ,EAAEhB,cAAc;IACxBS,OAAO,EAAEP;EACb,CAAC,CAAC;AACN,CAAC;AACD,eAAeN,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}