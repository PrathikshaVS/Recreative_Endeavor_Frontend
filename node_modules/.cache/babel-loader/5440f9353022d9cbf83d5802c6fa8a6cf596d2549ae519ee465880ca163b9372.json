{"ast":null,"code":"import { useCallback, useRef } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nconst defaultOptions = {\n  increment: 1,\n  startAt: 0,\n  finishAt: 100\n};\nconst errorMessage = 'requestAnimationFrame is not supported, this could happen both because ' + 'window.requestAnimationFrame is not supported by your current browser version or you\\'re using the ' + 'useRequestAnimationFrame hook whilst server side rendering.';\n/**\n * Takes care of running an animating function, provided as the first argument, while keeping track of its progress.\n */\nconst useRequestAnimationFrame = (func, options = defaultOptions) => {\n  if (!isClient || !isAPISupported('requestAnimationFrame')) {\n    // eslint-disable-next-line no-console\n    console.warn(errorMessage);\n    return createCbSetterErrorProxy(errorMessage);\n  }\n  const opts = Object.assign(Object.assign({}, defaultOptions), options);\n  const progress = useRef(opts.startAt);\n  const [onFinish, setOnFinish] = useHandlerSetterRef();\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  const next = () => window.requestAnimationFrame(step);\n  const step = useCallback(() => {\n    if (progress.current <= opts.finishAt || opts.finishAt === -1) {\n      func(progress.current, next);\n      progress.current += opts.increment;\n    } else if (onFinish.current) {\n      onFinish.current();\n    }\n  }, [func, opts.finishAt, opts.increment, progress.current, onFinish]);\n  if (progress.current <= opts.startAt) {\n    next();\n  }\n  return setOnFinish;\n};\nexport default useRequestAnimationFrame;","map":{"version":3,"names":["useCallback","useRef","useHandlerSetterRef","isClient","isAPISupported","createCbSetterErrorProxy","defaultOptions","increment","startAt","finishAt","errorMessage","useRequestAnimationFrame","func","options","console","warn","opts","Object","assign","progress","onFinish","setOnFinish","next","window","requestAnimationFrame","step","current"],"sources":["C:/Users/HAI/OneDrive/Documents/Hobby/Frontend/node_modules/beautiful-react-hooks/esm/useRequestAnimationFrame.js"],"sourcesContent":["import { useCallback, useRef } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nconst defaultOptions = { increment: 1, startAt: 0, finishAt: 100 };\nconst errorMessage = 'requestAnimationFrame is not supported, this could happen both because '\n    + 'window.requestAnimationFrame is not supported by your current browser version or you\\'re using the '\n    + 'useRequestAnimationFrame hook whilst server side rendering.';\n/**\n * Takes care of running an animating function, provided as the first argument, while keeping track of its progress.\n */\nconst useRequestAnimationFrame = (func, options = defaultOptions) => {\n    if (!isClient || !isAPISupported('requestAnimationFrame')) {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage);\n        return createCbSetterErrorProxy(errorMessage);\n    }\n    const opts = Object.assign(Object.assign({}, defaultOptions), options);\n    const progress = useRef(opts.startAt);\n    const [onFinish, setOnFinish] = useHandlerSetterRef();\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const next = () => window.requestAnimationFrame(step);\n    const step = useCallback(() => {\n        if (progress.current <= opts.finishAt || opts.finishAt === -1) {\n            func(progress.current, next);\n            progress.current += opts.increment;\n        }\n        else if (onFinish.current) {\n            onFinish.current();\n        }\n    }, [func, opts.finishAt, opts.increment, progress.current, onFinish]);\n    if (progress.current <= opts.startAt) {\n        next();\n    }\n    return setOnFinish;\n};\nexport default useRequestAnimationFrame;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAC3C,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,wBAAwB,MAAM,mCAAmC;AACxE,MAAMC,cAAc,GAAG;EAAEC,SAAS,EAAE,CAAC;EAAEC,OAAO,EAAE,CAAC;EAAEC,QAAQ,EAAE;AAAI,CAAC;AAClE,MAAMC,YAAY,GAAG,yEAAyE,GACxF,qGAAqG,GACrG,6DAA6D;AACnE;AACA;AACA;AACA,MAAMC,wBAAwB,GAAGA,CAACC,IAAI,EAAEC,OAAO,GAAGP,cAAc,KAAK;EACjE,IAAI,CAACH,QAAQ,IAAI,CAACC,cAAc,CAAC,uBAAuB,CAAC,EAAE;IACvD;IACAU,OAAO,CAACC,IAAI,CAACL,YAAY,CAAC;IAC1B,OAAOL,wBAAwB,CAACK,YAAY,CAAC;EACjD;EACA,MAAMM,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEZ,cAAc,CAAC,EAAEO,OAAO,CAAC;EACtE,MAAMM,QAAQ,GAAGlB,MAAM,CAACe,IAAI,CAACR,OAAO,CAAC;EACrC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,mBAAmB,CAAC,CAAC;EACrD;EACA,MAAMoB,IAAI,GAAGA,CAAA,KAAMC,MAAM,CAACC,qBAAqB,CAACC,IAAI,CAAC;EACrD,MAAMA,IAAI,GAAGzB,WAAW,CAAC,MAAM;IAC3B,IAAImB,QAAQ,CAACO,OAAO,IAAIV,IAAI,CAACP,QAAQ,IAAIO,IAAI,CAACP,QAAQ,KAAK,CAAC,CAAC,EAAE;MAC3DG,IAAI,CAACO,QAAQ,CAACO,OAAO,EAAEJ,IAAI,CAAC;MAC5BH,QAAQ,CAACO,OAAO,IAAIV,IAAI,CAACT,SAAS;IACtC,CAAC,MACI,IAAIa,QAAQ,CAACM,OAAO,EAAE;MACvBN,QAAQ,CAACM,OAAO,CAAC,CAAC;IACtB;EACJ,CAAC,EAAE,CAACd,IAAI,EAAEI,IAAI,CAACP,QAAQ,EAAEO,IAAI,CAACT,SAAS,EAAEY,QAAQ,CAACO,OAAO,EAAEN,QAAQ,CAAC,CAAC;EACrE,IAAID,QAAQ,CAACO,OAAO,IAAIV,IAAI,CAACR,OAAO,EAAE;IAClCc,IAAI,CAAC,CAAC;EACV;EACA,OAAOD,WAAW;AACtB,CAAC;AACD,eAAeV,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}