{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport isApiSupported from './shared/isAPISupported';\nimport isClient from './shared/isClient';\n// eslint-disable-next-line max-len\nconst errorMessage = 'ResizeObserver is not supported, this could happen both because window.ResizeObserver is not supported by your current browser or you\\'re using the useResizeObserver hook whilst server side rendering.';\n/**\n * Uses the ResizeObserver API to observe changes within the given HTML Element DOM Rect.\n * @param elementRef\n * @param debounceTimeout\n * @returns {undefined}\n */\nconst useResizeObserver = (elementRef, debounceTimeout = 100) => {\n  const isSupported = isApiSupported('ResizeObserver');\n  const observerRef = useRef(null);\n  const [DOMRect, setDOMRect] = useState();\n  if (isClient && !isSupported) {\n    // eslint-disable-next-line no-console\n    console.warn(errorMessage);\n  }\n  // creates the observer reference on mount\n  useEffect(() => {\n    if (isSupported) {\n      const fn = debounce(entries => {\n        const {\n          bottom,\n          height,\n          left,\n          right,\n          top,\n          width\n        } = entries[0].contentRect;\n        setDOMRect({\n          bottom,\n          height,\n          left,\n          right,\n          top,\n          width\n        });\n      }, debounceTimeout);\n      observerRef.current = new ResizeObserver(fn);\n      return () => {\n        var _a;\n        fn.cancel();\n        (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.disconnect();\n      };\n    }\n    return () => {};\n  }, []);\n  // observes on the provided element ref\n  useEffect(() => {\n    var _a;\n    if (isSupported && elementRef.current) {\n      (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.observe(elementRef.current);\n    }\n  }, [elementRef.current]);\n  return DOMRect;\n};\nexport default useResizeObserver;","map":{"version":3,"names":["useEffect","useRef","useState","debounce","isApiSupported","isClient","errorMessage","useResizeObserver","elementRef","debounceTimeout","isSupported","observerRef","DOMRect","setDOMRect","console","warn","fn","entries","bottom","height","left","right","top","width","contentRect","current","ResizeObserver","_a","cancel","disconnect","observe"],"sources":["C:/Users/HAI/OneDrive/Documents/Hobby/Frontend/node_modules/beautiful-react-hooks/esm/useResizeObserver.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport isApiSupported from './shared/isAPISupported';\nimport isClient from './shared/isClient';\n// eslint-disable-next-line max-len\nconst errorMessage = 'ResizeObserver is not supported, this could happen both because window.ResizeObserver is not supported by your current browser or you\\'re using the useResizeObserver hook whilst server side rendering.';\n/**\n * Uses the ResizeObserver API to observe changes within the given HTML Element DOM Rect.\n * @param elementRef\n * @param debounceTimeout\n * @returns {undefined}\n */\nconst useResizeObserver = (elementRef, debounceTimeout = 100) => {\n    const isSupported = isApiSupported('ResizeObserver');\n    const observerRef = useRef(null);\n    const [DOMRect, setDOMRect] = useState();\n    if (isClient && !isSupported) {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage);\n    }\n    // creates the observer reference on mount\n    useEffect(() => {\n        if (isSupported) {\n            const fn = debounce((entries) => {\n                const { bottom, height, left, right, top, width } = entries[0].contentRect;\n                setDOMRect({ bottom, height, left, right, top, width });\n            }, debounceTimeout);\n            observerRef.current = new ResizeObserver(fn);\n            return () => {\n                var _a;\n                fn.cancel();\n                (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.disconnect();\n            };\n        }\n        return () => {\n        };\n    }, []);\n    // observes on the provided element ref\n    useEffect(() => {\n        var _a;\n        if (isSupported && elementRef.current) {\n            (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.observe(elementRef.current);\n        }\n    }, [elementRef.current]);\n    return DOMRect;\n};\nexport default useResizeObserver;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,QAAQ,MAAM,mBAAmB;AACxC;AACA,MAAMC,YAAY,GAAG,0MAA0M;AAC/N;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGA,CAACC,UAAU,EAAEC,eAAe,GAAG,GAAG,KAAK;EAC7D,MAAMC,WAAW,GAAGN,cAAc,CAAC,gBAAgB,CAAC;EACpD,MAAMO,WAAW,GAAGV,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,CAAC;EACxC,IAAIG,QAAQ,IAAI,CAACK,WAAW,EAAE;IAC1B;IACAI,OAAO,CAACC,IAAI,CAACT,YAAY,CAAC;EAC9B;EACA;EACAN,SAAS,CAAC,MAAM;IACZ,IAAIU,WAAW,EAAE;MACb,MAAMM,EAAE,GAAGb,QAAQ,CAAEc,OAAO,IAAK;QAC7B,MAAM;UAAEC,MAAM;UAAEC,MAAM;UAAEC,IAAI;UAAEC,KAAK;UAAEC,GAAG;UAAEC;QAAM,CAAC,GAAGN,OAAO,CAAC,CAAC,CAAC,CAACO,WAAW;QAC1EX,UAAU,CAAC;UAAEK,MAAM;UAAEC,MAAM;UAAEC,IAAI;UAAEC,KAAK;UAAEC,GAAG;UAAEC;QAAM,CAAC,CAAC;MAC3D,CAAC,EAAEd,eAAe,CAAC;MACnBE,WAAW,CAACc,OAAO,GAAG,IAAIC,cAAc,CAACV,EAAE,CAAC;MAC5C,OAAO,MAAM;QACT,IAAIW,EAAE;QACNX,EAAE,CAACY,MAAM,CAAC,CAAC;QACX,CAACD,EAAE,GAAGhB,WAAW,CAACc,OAAO,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,UAAU,CAAC,CAAC;MACnF,CAAC;IACL;IACA,OAAO,MAAM,CACb,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACN;EACA7B,SAAS,CAAC,MAAM;IACZ,IAAI2B,EAAE;IACN,IAAIjB,WAAW,IAAIF,UAAU,CAACiB,OAAO,EAAE;MACnC,CAACE,EAAE,GAAGhB,WAAW,CAACc,OAAO,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,OAAO,CAACtB,UAAU,CAACiB,OAAO,CAAC;IAClG;EACJ,CAAC,EAAE,CAACjB,UAAU,CAACiB,OAAO,CAAC,CAAC;EACxB,OAAOb,OAAO;AAClB,CAAC;AACD,eAAeL,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}